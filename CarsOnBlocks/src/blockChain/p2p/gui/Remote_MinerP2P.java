//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 
//::                                                                         ::
//::     Antonio Manuel Rodrigues Manso                                      ::
//::                                                                         ::
//::     I N S T I T U T O    P O L I T E C N I C O   D E   T O M A R        ::
//::     Escola Superior de Tecnologia de Tomar                              ::
//::     e-mail: manso@ipt.pt                                                ::
//::     url   : http://orion.ipt.pt/~manso                                  ::
//::                                                                         ::
//::     This software was build with the purpose of investigate and         ::
//::     learning.                                                           ::
//::                                                                         ::
//::                                                               (c)2021   ::
//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
//////////////////////////////////////////////////////////////////////////////

package blockChain.p2p.gui;

import blockChain.miner.Miner;
import java.awt.Color;
import java.rmi.RemoteException;
import javax.swing.SwingUtilities;
import myUtils.GuiUtils;
import myUtils.RMI;
import blockChain.p2p.miner.IminerRemoteP2P;
import blockChain.p2p.miner.RemoteMinerP2P;
import blockChain.p2p.miner.RemoteMiningListenerP2P;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author IPT
 */
public class Remote_MinerP2P extends javax.swing.JFrame implements RemoteMiningListenerP2P {

    RemoteMinerP2P miner = null;

    /**
     * Creates new form Test03_GUI_miner
     */
    public Remote_MinerP2P() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        txtLog = new javax.swing.JTextPane();
        tpMain = new javax.swing.JTabbedPane();
        pnServer = new javax.swing.JPanel();
        pnStartServer1 = new javax.swing.JPanel();
        spMyServerPort = new javax.swing.JSpinner();
        txtAddress = new javax.swing.JTextField();
        btStartServer = new javax.swing.JButton();
        pnMiner = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        spZeros = new javax.swing.JSpinner();
        txtNonce = new javax.swing.JTextField();
        txtHash = new javax.swing.JTextField();
        icon = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtMessage = new javax.swing.JTextArea();
        pnNtework = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtNetwork = new javax.swing.JTextArea();
        jPanel8 = new javax.swing.JPanel();
        txtServerAdress = new javax.swing.JTextField();
        btAddServer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Miner (c) M@nso0 2022");

        jScrollPane2.setPreferredSize(new java.awt.Dimension(64, 400));

        txtLog.setBackground(new java.awt.Color(0, 0, 0));
        txtLog.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Log", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        txtLog.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        jScrollPane2.setViewportView(txtLog);

        getContentPane().add(jScrollPane2, java.awt.BorderLayout.CENTER);

        pnStartServer1.setLayout(new java.awt.GridLayout(2, 1, 5, 5));

        spMyServerPort.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        spMyServerPort.setModel(new javax.swing.SpinnerNumberModel(10010, 10010, null, 1));
        spMyServerPort.setBorder(javax.swing.BorderFactory.createTitledBorder("Port"));

        txtAddress.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        txtAddress.setBorder(javax.swing.BorderFactory.createTitledBorder("Server Address"));

        btStartServer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/blockChain/gui/images/start.png"))); // NOI18N
        btStartServer.setText("Start Server");
        btStartServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btStartServerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnServerLayout = new javax.swing.GroupLayout(pnServer);
        pnServer.setLayout(pnServerLayout);
        pnServerLayout.setHorizontalGroup(
            pnServerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnServerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnServerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtAddress)
                    .addGroup(pnServerLayout.createSequentialGroup()
                        .addComponent(btStartServer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spMyServerPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 420, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnStartServer1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(159, 159, 159))
        );
        pnServerLayout.setVerticalGroup(
            pnServerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnStartServer1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(pnServerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnServerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btStartServer, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spMyServerPort, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtAddress)
                .addContainerGap())
        );

        tpMain.addTab("Server", pnServer);

        pnMiner.setLayout(new java.awt.BorderLayout());

        spZeros.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        spZeros.setModel(new javax.swing.SpinnerNumberModel(3, 2, null, 1));
        spZeros.setBorder(javax.swing.BorderFactory.createTitledBorder("Zeros"));
        spZeros.setEnabled(false);

        txtNonce.setEditable(false);
        txtNonce.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        txtNonce.setText("0");
        txtNonce.setBorder(javax.swing.BorderFactory.createTitledBorder("Nonce"));

        txtHash.setEditable(false);
        txtHash.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        txtHash.setText("0");
        txtHash.setBorder(javax.swing.BorderFactory.createTitledBorder("Hash"));

        icon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/blockChain/gui/images/working.gif"))); // NOI18N
        icon.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtHash)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(spZeros, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtNonce, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(icon)))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(spZeros, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtNonce)
                    .addComponent(icon, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtHash, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnMiner.add(jPanel7, java.awt.BorderLayout.WEST);

        txtMessage.setColumns(20);
        txtMessage.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        txtMessage.setRows(5);
        txtMessage.setText("Hello GUI world!");
        txtMessage.setBorder(javax.swing.BorderFactory.createTitledBorder("Message"));
        txtMessage.setEnabled(false);
        jScrollPane1.setViewportView(txtMessage);

        pnMiner.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        tpMain.addTab("Miner", pnMiner);

        pnNtework.setLayout(new java.awt.BorderLayout());

        txtNetwork.setColumns(20);
        txtNetwork.setFont(new java.awt.Font("Courier New", 1, 12)); // NOI18N
        txtNetwork.setRows(5);
        jScrollPane3.setViewportView(txtNetwork);

        pnNtework.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        txtServerAdress.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        txtServerAdress.setText("//192.168.161.15:10010/miner");
        txtServerAdress.setBorder(javax.swing.BorderFactory.createTitledBorder("Adress"));

        btAddServer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/blockChain/gui/images/add-server-icon.png"))); // NOI18N
        btAddServer.setText("Add  Server");
        btAddServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddServerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btAddServer, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE))
                    .addComponent(txtServerAdress))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtServerAdress, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btAddServer, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pnNtework.add(jPanel8, java.awt.BorderLayout.WEST);

        tpMain.addTab("Network", pnNtework);

        getContentPane().add(tpMain, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btStartServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btStartServerActionPerformed
        try {
            int port = (Integer) spMyServerPort.getValue();
            miner = new RemoteMinerP2P(port, this);
            RMI.startRemoteObject(miner, port, IminerRemoteP2P.NAME);
            txtAddress.setText(miner.getAdress());
            this.setTitle(miner.getAdress());
        } catch (Exception ex) {
            onException("Start Server", ex);
        }
    }//GEN-LAST:event_btStartServerActionPerformed

    private void btAddServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddServerActionPerformed
        try {
            miner.addNode((IminerRemoteP2P) RMI.getRemote(txtServerAdress.getText()));
        } catch (Exception ex) {
            onException("Add Server", ex);
        }
    }//GEN-LAST:event_btAddServerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Remote_MinerP2P.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Remote_MinerP2P.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Remote_MinerP2P.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Remote_MinerP2P.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Remote_MinerP2P().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAddServer;
    private javax.swing.JButton btStartServer;
    private javax.swing.JLabel icon;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel pnMiner;
    private javax.swing.JPanel pnNtework;
    private javax.swing.JPanel pnServer;
    private javax.swing.JPanel pnStartServer1;
    private javax.swing.JSpinner spMyServerPort;
    private javax.swing.JSpinner spZeros;
    private javax.swing.JTabbedPane tpMain;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtHash;
    private javax.swing.JTextPane txtLog;
    private javax.swing.JTextArea txtMessage;
    private javax.swing.JTextArea txtNetwork;
    private javax.swing.JTextField txtNonce;
    private javax.swing.JTextField txtServerAdress;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onException(String title, Exception ex) {
        GuiUtils.insertText(txtLog, title, ex.getMessage(), Color.RED, Color.MAGENTA);
    }

    @Override
    public void onStartMining(String message, int zeros) {
        SwingUtilities.invokeLater(() -> {
            try {
                GuiUtils.insertText(txtLog, "Start Mining",
                        " " + message + "[" + zeros + "]", Color.GREEN, Color.WHITE);
                txtMessage.setText(miner.getMessage());
                txtHash.setText("");
                spZeros.setValue(zeros);
                icon.setEnabled(true);
            } catch (RemoteException ex) {
                onException("Start Mining", ex);
            }
        });
    }

    @Override
    public void onStopMining(int nonce) {
        SwingUtilities.invokeLater(() -> {
            GuiUtils.insertText(txtLog, "Stop Mining", Thread.currentThread().getName()
                    + "\tNonce [ " + nonce + " ]", Color.BLUE, Color.WHITE);
            icon.setEnabled(false);
        });
    }

    @Override
    public void onMining(int number) {
        SwingUtilities.invokeLater(() -> {
            txtNonce.setText(number + "");
        });
    }

    @Override
    public void onNounceFound(int nonce) {
        //parar a rede de minar
        try {
            miner.stopMining(nonce);
        } catch (RemoteException ex) {
            onException("Nounce Found", ex);
        }
        //atualizar a GUI
        SwingUtilities.invokeLater(() -> {
            GuiUtils.insertText(txtLog, "WINNER ", "\tFound nonce [ " + nonce + " ]", Color.GREEN, Color.MAGENTA);
            txtNonce.setText(nonce + "");
            txtHash.setText(Miner.getHash(txtMessage.getText(), nonce));
            icon.setEnabled(false);
        });

    }

    @Override
    public void onStart(RemoteMinerP2P rm) {
        SwingUtilities.invokeLater(() -> {
            GuiUtils.insertText(txtLog, "Server Start ", rm.getAdress(), Color.GREEN, Color.WHITE);
            btStartServer.setEnabled(false);
            tpMain.setSelectedComponent(pnMiner);
        });
    }

    @Override
    public void onAddNode(IminerRemoteP2P rm) {
        try {
            StringBuilder txt = new StringBuilder();
            for (IminerRemoteP2P m : miner.getNetwork()) {
                txt.append(m.getAdress() + "\n");
            }
            txtNetwork.setText(txt.toString().trim());
        } catch (RemoteException ex) {
            Logger.getLogger(Remote_MinerP2P.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void onMessage(String title, String message) {
        GuiUtils.insertText(txtLog, title, message);
    }
}
