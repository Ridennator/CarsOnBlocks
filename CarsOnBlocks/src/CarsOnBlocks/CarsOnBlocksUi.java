/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package CarsOnBlocks;

import CarsOnBlocks.utils.GuiUtils;
import blockChain.chain.Block;
import blockChain.miner.Miner;
import blockChain.p2p.miner.InterfaceRemoteMiner;
import java.awt.Color;
import java.rmi.RemoteException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Base64;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author Rodrigo Maia & Rúben Poupado
 */
public class CarsOnBlocksUi extends javax.swing.JFrame{

    // Variável que servirá como a "base de dados" do sistema.
    public CarRegistry carRegistry;
    // Variável que indica o utilizador logado.
    public static User loggedUser;
    // Variável da Classe Miner da Clientside do programa.
    InterfaceRemoteMiner clientMiner = null;
    
    public CarsOnBlocksUi(User user, InterfaceRemoteMiner miner) {
        // Utilizador atualmente logado
        loggedUser = user;
        // Mineiro definido no inicio da sua sessão
        clientMiner = miner;
        initComponents();
        setLocationRelativeTo(null);
        // Bem-vindo utilizador :)
        welcomeLabel.setText("Welcome " + user.getName());
        // Instancia a classe "mãe" dos dados do programa e carrega os dados
        carRegistry = new CarRegistry();
        carRegistry.load();
        
        // Se o utilizador não tiver acesso administrador, esconde a tab de Management
        if (user.getAccess().compareTo("Client")==0)
            MainPane.remove(TabManagement);
        
        displayUser();
    }
    
        public void main(String args[]) {
            java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new CarsOnBlocksUi(loggedUser, clientMiner).setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(CarsOnBlocksLogIn.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CarsOnBlocksLogIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CarsOnBlocksLogIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CarsOnBlocksLogIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CarsOnBlocksLogIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButton1 = new javax.swing.JRadioButton();
        MainPane = new javax.swing.JTabbedPane();
        UpdatesPanel = new javax.swing.JPanel();
        HomeLogoutBt = new javax.swing.JButton();
        welcomeLabel = new javax.swing.JLabel();
        InfoPanel = new javax.swing.JPanel();
        TabUsers = new javax.swing.JTabbedPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtInfo = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        txtPublicKey = new javax.swing.JTextArea();
        jScrollPane7 = new javax.swing.JScrollPane();
        txtPrivateKey = new javax.swing.JTextArea();
        jScrollPane8 = new javax.swing.JScrollPane();
        txtSecretKey = new javax.swing.JTextArea();
        ReservedCarsPanel = new javax.swing.JPanel();
        CarsList2 = new javax.swing.JScrollPane();
        ReservedCarsTxt = new javax.swing.JList<>();
        CarsDescription2 = new javax.swing.JPanel();
        ReservedCarInfoScrl = new javax.swing.JScrollPane();
        ReservedCarInfoTxt = new javax.swing.JList<>();
        AvailableCarsPanel = new javax.swing.JPanel();
        CarsList5 = new javax.swing.JScrollPane();
        AvailableCarsTxt = new javax.swing.JList<>();
        TabManagement = new javax.swing.JTabbedPane();
        ServerPanel = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        ServerLogTxt = new javax.swing.JTextPane();
        SimulatorPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        SimulatorSpeedTxt = new javax.swing.JTextField();
        SimulatorLocationTxt = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        SimulatorCarTxt = new javax.swing.JComboBox<>();
        SimulatorClientTxt = new javax.swing.JComboBox<>();
        SimulatorMineBt = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        ZerosTxt = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        NonceTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        HashTxt = new javax.swing.JTextField();
        jScrollPane13 = new javax.swing.JScrollPane();
        MessageTxt = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        UsersPanel = new javax.swing.JPanel();
        ClientsList1 = new javax.swing.JScrollPane();
        ManageUsersListTxt = new javax.swing.JList<>();
        ClientTransactions = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ClientCarInfoList = new javax.swing.JList<>();
        CarsPanel = new javax.swing.JPanel();
        CarsList1 = new javax.swing.JScrollPane();
        ManageCarsListTxt = new javax.swing.JList<>();
        CarsDescription1 = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        ManageCarInfoTxt = new javax.swing.JList<>();
        RegisterPanel = new javax.swing.JPanel();
        RegisterUserPanel = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        RegisterUsername = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        RegisterUserBt = new javax.swing.JButton();
        RegisterUserPass1 = new javax.swing.JPasswordField();
        RegisterUserPass2 = new javax.swing.JPasswordField();
        jLabel22 = new javax.swing.JLabel();
        RegisterUserAccess = new javax.swing.JComboBox<>();
        RegisterCarPanel = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        RegisterCarModel = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        RegisterCarBt = new javax.swing.JButton();
        RegisterCarManufacturer = new javax.swing.JTextField();
        tpBlockchain = new javax.swing.JTabbedPane();
        pnBlockChain = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstBlockchain = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtBlock = new javax.swing.JTextArea();

        jRadioButton1.setText("jRadioButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        MainPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                MainPaneStateChanged(evt);
            }
        });

        HomeLogoutBt.setBackground(new java.awt.Color(102, 0, 0));
        HomeLogoutBt.setText("Logout");
        HomeLogoutBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HomeLogoutBtActionPerformed(evt);
            }
        });

        welcomeLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        welcomeLabel.setText("Welcome XXXXX");

        javax.swing.GroupLayout UpdatesPanelLayout = new javax.swing.GroupLayout(UpdatesPanel);
        UpdatesPanel.setLayout(UpdatesPanelLayout);
        UpdatesPanelLayout.setHorizontalGroup(
            UpdatesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UpdatesPanelLayout.createSequentialGroup()
                .addContainerGap(455, Short.MAX_VALUE)
                .addGroup(UpdatesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, UpdatesPanelLayout.createSequentialGroup()
                        .addComponent(HomeLogoutBt)
                        .addGap(481, 481, 481))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, UpdatesPanelLayout.createSequentialGroup()
                        .addComponent(welcomeLabel)
                        .addGap(452, 452, 452))))
        );
        UpdatesPanelLayout.setVerticalGroup(
            UpdatesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UpdatesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(HomeLogoutBt)
                .addGap(18, 18, 18)
                .addComponent(welcomeLabel)
                .addContainerGap(530, Short.MAX_VALUE))
        );

        MainPane.addTab("Home", UpdatesPanel);

        InfoPanel.setLayout(new java.awt.BorderLayout());

        TabUsers.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TabUsersStateChanged(evt);
            }
        });

        txtInfo.setColumns(20);
        txtInfo.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        txtInfo.setLineWrap(true);
        txtInfo.setRows(5);
        txtInfo.setWrapStyleWord(true);
        jScrollPane5.setViewportView(txtInfo);

        TabUsers.addTab("Info", jScrollPane5);

        txtPublicKey.setColumns(20);
        txtPublicKey.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        txtPublicKey.setLineWrap(true);
        txtPublicKey.setRows(5);
        txtPublicKey.setWrapStyleWord(true);
        jScrollPane6.setViewportView(txtPublicKey);

        TabUsers.addTab("Public Key", jScrollPane6);

        txtPrivateKey.setColumns(20);
        txtPrivateKey.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        txtPrivateKey.setLineWrap(true);
        txtPrivateKey.setRows(5);
        txtPrivateKey.setWrapStyleWord(true);
        jScrollPane7.setViewportView(txtPrivateKey);

        TabUsers.addTab("Private Key", jScrollPane7);

        txtSecretKey.setColumns(20);
        txtSecretKey.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        txtSecretKey.setLineWrap(true);
        txtSecretKey.setRows(5);
        txtSecretKey.setWrapStyleWord(true);
        jScrollPane8.setViewportView(txtSecretKey);

        TabUsers.addTab("Secret Key", jScrollPane8);

        ReservedCarsTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ReservedCarsTxtMouseClicked(evt);
            }
        });
        CarsList2.setViewportView(ReservedCarsTxt);

        CarsDescription2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        ReservedCarInfoScrl.setViewportView(ReservedCarInfoTxt);

        javax.swing.GroupLayout CarsDescription2Layout = new javax.swing.GroupLayout(CarsDescription2);
        CarsDescription2.setLayout(CarsDescription2Layout);
        CarsDescription2Layout.setHorizontalGroup(
            CarsDescription2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ReservedCarInfoScrl, javax.swing.GroupLayout.DEFAULT_SIZE, 891, Short.MAX_VALUE)
        );
        CarsDescription2Layout.setVerticalGroup(
            CarsDescription2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ReservedCarInfoScrl)
        );

        javax.swing.GroupLayout ReservedCarsPanelLayout = new javax.swing.GroupLayout(ReservedCarsPanel);
        ReservedCarsPanel.setLayout(ReservedCarsPanelLayout);
        ReservedCarsPanelLayout.setHorizontalGroup(
            ReservedCarsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ReservedCarsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(CarsList2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CarsDescription2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        ReservedCarsPanelLayout.setVerticalGroup(
            ReservedCarsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ReservedCarsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ReservedCarsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CarsDescription2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(ReservedCarsPanelLayout.createSequentialGroup()
                        .addComponent(CarsList2, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 346, Short.MAX_VALUE))))
        );

        TabUsers.addTab("My Rented Cars", ReservedCarsPanel);

        InfoPanel.add(TabUsers, java.awt.BorderLayout.CENTER);

        MainPane.addTab("User", InfoPanel);

        AvailableCarsTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AvailableCarsTxtMouseClicked(evt);
            }
        });
        CarsList5.setViewportView(AvailableCarsTxt);

        javax.swing.GroupLayout AvailableCarsPanelLayout = new javax.swing.GroupLayout(AvailableCarsPanel);
        AvailableCarsPanel.setLayout(AvailableCarsPanelLayout);
        AvailableCarsPanelLayout.setHorizontalGroup(
            AvailableCarsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AvailableCarsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(CarsList5, javax.swing.GroupLayout.DEFAULT_SIZE, 1029, Short.MAX_VALUE)
                .addContainerGap())
        );
        AvailableCarsPanelLayout.setVerticalGroup(
            AvailableCarsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AvailableCarsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(CarsList5, javax.swing.GroupLayout.DEFAULT_SIZE, 590, Short.MAX_VALUE)
                .addContainerGap())
        );

        MainPane.addTab("Available Cars", AvailableCarsPanel);

        TabManagement.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TabManagementStateChanged(evt);
            }
        });

        jScrollPane11.setPreferredSize(new java.awt.Dimension(64, 400));

        ServerLogTxt.setBackground(new java.awt.Color(0, 0, 0));
        ServerLogTxt.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Log", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        ServerLogTxt.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        jScrollPane11.setViewportView(ServerLogTxt);

        javax.swing.GroupLayout ServerPanelLayout = new javax.swing.GroupLayout(ServerPanel);
        ServerPanel.setLayout(ServerPanelLayout);
        ServerPanelLayout.setHorizontalGroup(
            ServerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ServerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 669, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(366, Short.MAX_VALUE))
        );
        ServerPanelLayout.setVerticalGroup(
            ServerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ServerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(165, Short.MAX_VALUE))
        );

        TabManagement.addTab("Server", ServerPanel);

        jPanel2.setBorder(javax.swing.BorderFactory.createCompoundBorder(null, javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Simulate Information");

        jLabel12.setText("Car");

        jLabel13.setText("Speed");

        jLabel14.setText("Coordinates");

        jLabel16.setText("Client");

        SimulatorClientTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SimulatorClientTxtActionPerformed(evt);
            }
        });

        SimulatorMineBt.setText("Start");
        SimulatorMineBt.setMaximumSize(new java.awt.Dimension(103, 103));
        SimulatorMineBt.setMinimumSize(new java.awt.Dimension(100, 100));
        SimulatorMineBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SimulatorMineBtActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
                    .addComponent(SimulatorSpeedTxt)
                    .addComponent(SimulatorLocationTxt, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(SimulatorCarTxt, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SimulatorClientTxt, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SimulatorMineBt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SimulatorCarTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SimulatorClientTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SimulatorSpeedTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SimulatorLocationTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(111, 111, 111)
                .addComponent(SimulatorMineBt, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(113, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createCompoundBorder(null, javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));

        ZerosTxt.setModel(new javax.swing.SpinnerNumberModel(3, 2, 8, 1));

        jLabel1.setText("Zeros");

        jLabel2.setText("Nonce");

        NonceTxt.setEditable(false);
        NonceTxt.setText("0");

        jLabel3.setText("Hash");

        HashTxt.setEditable(false);

        MessageTxt.setColumns(20);
        MessageTxt.setRows(5);
        jScrollPane13.setViewportView(MessageTxt);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Miner");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(NonceTxt)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ZerosTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)))
                    .addComponent(HashTxt, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ZerosTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NonceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(HashTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout SimulatorPanelLayout = new javax.swing.GroupLayout(SimulatorPanel);
        SimulatorPanel.setLayout(SimulatorPanelLayout);
        SimulatorPanelLayout.setHorizontalGroup(
            SimulatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SimulatorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(536, Short.MAX_VALUE))
        );
        SimulatorPanelLayout.setVerticalGroup(
            SimulatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SimulatorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SimulatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        TabManagement.addTab("Simulator", SimulatorPanel);

        ManageUsersListTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ManageUsersListTxtMouseClicked(evt);
            }
        });
        ClientsList1.setViewportView(ManageUsersListTxt);

        ClientTransactions.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jScrollPane2.setViewportView(ClientCarInfoList);

        javax.swing.GroupLayout ClientTransactionsLayout = new javax.swing.GroupLayout(ClientTransactions);
        ClientTransactions.setLayout(ClientTransactionsLayout);
        ClientTransactionsLayout.setHorizontalGroup(
            ClientTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
        );
        ClientTransactionsLayout.setVerticalGroup(
            ClientTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ClientTransactionsLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout UsersPanelLayout = new javax.swing.GroupLayout(UsersPanel);
        UsersPanel.setLayout(UsersPanelLayout);
        UsersPanelLayout.setHorizontalGroup(
            UsersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UsersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ClientsList1, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ClientTransactions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        UsersPanelLayout.setVerticalGroup(
            UsersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UsersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(UsersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ClientsList1)
                    .addComponent(ClientTransactions, javax.swing.GroupLayout.PREFERRED_SIZE, 350, Short.MAX_VALUE))
                .addContainerGap(215, Short.MAX_VALUE))
        );

        TabManagement.addTab("Users", UsersPanel);

        ManageCarsListTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ManageCarsListTxtMouseClicked(evt);
            }
        });
        CarsList1.setViewportView(ManageCarsListTxt);

        CarsDescription1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jScrollPane9.setViewportView(ManageCarInfoTxt);

        javax.swing.GroupLayout CarsDescription1Layout = new javax.swing.GroupLayout(CarsDescription1);
        CarsDescription1.setLayout(CarsDescription1Layout);
        CarsDescription1Layout.setHorizontalGroup(
            CarsDescription1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        CarsDescription1Layout.setVerticalGroup(
            CarsDescription1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CarsDescription1Layout.createSequentialGroup()
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout CarsPanelLayout = new javax.swing.GroupLayout(CarsPanel);
        CarsPanel.setLayout(CarsPanelLayout);
        CarsPanelLayout.setHorizontalGroup(
            CarsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CarsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(CarsList1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CarsDescription1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(427, Short.MAX_VALUE))
        );
        CarsPanelLayout.setVerticalGroup(
            CarsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CarsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CarsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(CarsDescription1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, Short.MAX_VALUE)
                    .addComponent(CarsList1))
                .addGap(0, 215, Short.MAX_VALUE))
        );

        TabManagement.addTab("Cars", CarsPanel);

        RegisterUserPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Client"));
        RegisterUserPanel.setToolTipText("User");

        jLabel17.setText("Username");

        RegisterUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegisterUsernameActionPerformed(evt);
            }
        });

        jLabel18.setText("Password");

        jLabel19.setText("Password Confirm");

        RegisterUserBt.setText("Register");
        RegisterUserBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegisterUserBtActionPerformed(evt);
            }
        });

        RegisterUserPass2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegisterUserPass2ActionPerformed(evt);
            }
        });

        jLabel22.setText("Access");

        RegisterUserAccess.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Client", "Admin" }));

        javax.swing.GroupLayout RegisterUserPanelLayout = new javax.swing.GroupLayout(RegisterUserPanel);
        RegisterUserPanel.setLayout(RegisterUserPanelLayout);
        RegisterUserPanelLayout.setHorizontalGroup(
            RegisterUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RegisterUserPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(RegisterUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RegisterUsername)
                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(RegisterUserPass1)
                    .addComponent(RegisterUserPass2)
                    .addGroup(RegisterUserPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(RegisterUserAccess, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(RegisterUserPanelLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(RegisterUserBt)
                .addContainerGap(74, Short.MAX_VALUE))
        );
        RegisterUserPanelLayout.setVerticalGroup(
            RegisterUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RegisterUserPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RegisterUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RegisterUserPass1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(RegisterUserPass2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addGroup(RegisterUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(RegisterUserAccess, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(RegisterUserBt)
                .addContainerGap(279, Short.MAX_VALUE))
        );

        RegisterCarPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Car"));

        jLabel20.setText("Model");

        RegisterCarModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegisterCarModelActionPerformed(evt);
            }
        });

        jLabel21.setText("Manufacturer");

        RegisterCarBt.setText("Register");
        RegisterCarBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegisterCarBtActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout RegisterCarPanelLayout = new javax.swing.GroupLayout(RegisterCarPanel);
        RegisterCarPanel.setLayout(RegisterCarPanelLayout);
        RegisterCarPanelLayout.setHorizontalGroup(
            RegisterCarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RegisterCarPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(RegisterCarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RegisterCarModel, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(RegisterCarManufacturer))
                .addContainerGap())
            .addGroup(RegisterCarPanelLayout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(RegisterCarBt)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        RegisterCarPanelLayout.setVerticalGroup(
            RegisterCarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RegisterCarPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RegisterCarModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RegisterCarManufacturer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(121, 121, 121)
                .addComponent(RegisterCarBt)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout RegisterPanelLayout = new javax.swing.GroupLayout(RegisterPanel);
        RegisterPanel.setLayout(RegisterPanelLayout);
        RegisterPanelLayout.setHorizontalGroup(
            RegisterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RegisterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(RegisterUserPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RegisterCarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(596, Short.MAX_VALUE))
        );
        RegisterPanelLayout.setVerticalGroup(
            RegisterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RegisterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(RegisterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(RegisterCarPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(RegisterUserPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        RegisterUserPanel.getAccessibleContext().setAccessibleName("User");

        TabManagement.addTab("Register", RegisterPanel);

        MainPane.addTab("Management", TabManagement);

        getContentPane().add(MainPane, java.awt.BorderLayout.LINE_START);

        tpBlockchain.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tpBlockchainStateChanged(evt);
            }
        });

        pnBlockChain.setLayout(new java.awt.BorderLayout());

        jScrollPane3.setPreferredSize(new java.awt.Dimension(200, 146));

        lstBlockchain.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        lstBlockchain.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        lstBlockchain.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstBlockchainValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(lstBlockchain);

        pnBlockChain.add(jScrollPane3, java.awt.BorderLayout.LINE_START);

        txtBlock.setEditable(false);
        txtBlock.setColumns(20);
        txtBlock.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        txtBlock.setLineWrap(true);
        txtBlock.setRows(5);
        txtBlock.setWrapStyleWord(true);
        jScrollPane4.setViewportView(txtBlock);

        pnBlockChain.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        tpBlockchain.addTab("BlockChainExplorer", pnBlockChain);

        getContentPane().add(tpBlockchain, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lstBlockchainValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstBlockchainValueChanged
        if (lstBlockchain.getSelectedIndex() >= 0) {
            Block b = (Block) lstBlockchain.getSelectedValues()[0];
            txtBlock.setText(b.getFullInfo());
        }
    }//GEN-LAST:event_lstBlockchainValueChanged

    private void tpBlockchainStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tpBlockchainStateChanged
        if (tpBlockchain.getSelectedComponent() == pnBlockChain) {
            DefaultListModel model = new DefaultListModel();
            lstBlockchain.setModel(model);
        }
    }//GEN-LAST:event_tpBlockchainStateChanged

    private void TabManagementStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_TabManagementStateChanged
        // Quando uma tab por selecionada, fará o seguinte para a tab selecionada:
        
        // TAB MANAGEMENT >> SIMULATOR
        if (TabManagement.getSelectedComponent() == SimulatorPanel){
            // Classe que suporta o dropdown gráfico em que a lista de carros será inserida
            DefaultComboBoxModel<Car> carModel = new DefaultComboBoxModel();
            // Adiciona os carros à classe de suporte
            try{
                carModel.addAll(carRegistry.getCarsList());
            } catch (Exception e){
                System.out.println("Nenhum carro recolhido para a combobox.");
            }
            // Adiciona os carros ao dropdown gráfico
            SimulatorCarTxt.setModel(carModel);
            if (carModel.getSize() > 0)
                SimulatorCarTxt.setSelectedIndex(0);
            
            // Classe que suporta o dropdown gráfico em que a lista de utilizadores será inserida
            DefaultComboBoxModel<User> clientModel = new DefaultComboBoxModel();
            // Adiciona os utilizadores à classe de suporte
            try{
                clientModel.addAll(carRegistry.getUsersList());
            } catch (Exception e){
                System.out.println("Nenhum cliente recolhido para a combobox.");
            }
            // Adiciona os utilizadores ao dropdown gráfico
            SimulatorClientTxt.setModel(clientModel);
            SimulatorClientTxt.setSelectedIndex(0);
            System.out.println(carRegistry.getUsersList());
        }
        
        // TAB MANAGEMENT >> USERS
        if (TabManagement.getSelectedComponent() == UsersPanel) {
            // Classe que suporta a lista gráfica em que a lista de utilizadores será inserida
            DefaultListModel model = new DefaultListModel();
            model.addAll(carRegistry.getUsersList());
            ManageUsersListTxt.setModel(model);
        }
        
        // TAB MANAGEMENT >> CARS
        if (TabManagement.getSelectedComponent() == CarsPanel) {
            // Classe que suporta a lista gráfica em que a lista de utilizadores será inserida
            DefaultListModel model = new DefaultListModel();
            model.addAll(carRegistry.getCarsList());
            ManageCarsListTxt.setModel(model);
        }

        
    }//GEN-LAST:event_TabManagementStateChanged

    private void RegisterCarBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegisterCarBtActionPerformed
        // Variáveis String recebem os valores introduzidos quanto ao carro a ser registado
        String model = RegisterCarModel.getText();
        String man = RegisterCarManufacturer.getText();
        // Classe Car é instanciada
        Car c = new Car();
        // Colocação dos respetivos valores à nova classe
        c.setManufacturer(man);
        c.setModel(model);
        c.setId(carRegistry.getCarRegistrySize()+1);
        // Adição do carro à classe "mãe"
        carRegistry.addCar(c);
        carRegistry.save();
        JOptionPane.showMessageDialog(this, "Carro registado");
    }//GEN-LAST:event_RegisterCarBtActionPerformed

    private void RegisterCarModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegisterCarModelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RegisterCarModelActionPerformed

    private void RegisterUserPass2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegisterUserPass2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RegisterUserPass2ActionPerformed

    private void RegisterUserBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegisterUserBtActionPerformed
      try {
            // Caso a conta exista, retorna
            User user = User.load(RegisterUsername.getText());
            JOptionPane.showMessageDialog(this, "Este nome já existe.");
            return;
        } catch (Exception e) {
        }
        try {
            // Caso as passwords sejam diferentes, falhou-se a verificação do mesmo
            if (!Arrays.equals(RegisterUserPass1.getPassword(), RegisterUserPass2.getPassword())) {
                return;
            }
            // Regista o novo utilizador
            User.register(RegisterUsername.getText(), new String(RegisterUserPass1.getPassword()), RegisterUserAccess.getSelectedItem().toString());
            // Adiciona o novo utilizador à classe "mãe"
            carRegistry.addUser(User.load(RegisterUsername.getText()));
            JOptionPane.showMessageDialog(this, "User registado");

        } catch (Exception ex) {
            Logger.getLogger(CarsOnBlocksUi.class.getName()).log(Level.SEVERE, null, ex);
        }
        carRegistry.save();
    }//GEN-LAST:event_RegisterUserBtActionPerformed

    private void RegisterUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegisterUsernameActionPerformed

    }//GEN-LAST:event_RegisterUsernameActionPerformed

    private void ManageCarsListTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ManageCarsListTxtMouseClicked
        // Quando um carro é selecionado da lista MANAGE>CARS, este colocará a informação do mesmo obtida da blockchain na lista direita
        DefaultListModel model = new DefaultListModel();
        System.out.println(carRegistry.getCarInfoList(ManageCarsListTxt.getSelectedValue()));
        model.addAll(carRegistry.getCarInfoList(ManageCarsListTxt.getSelectedValue()));
        ManageCarInfoTxt.setModel(model);
    }//GEN-LAST:event_ManageCarsListTxtMouseClicked

    private void SimulatorMineBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SimulatorMineBtActionPerformed
        // Recolhe os dados a inserir no novo bloco
        Car car = SimulatorCarTxt.getItemAt(SimulatorCarTxt.getSelectedIndex());
        User user = SimulatorClientTxt.getItemAt(SimulatorClientTxt.getSelectedIndex());
        int speed = Integer.parseInt(SimulatorSpeedTxt.getText());
        String status;
        // Caso o cliente seja System, coloca o estado do carro como Available, pois não é de ninguém
        if (user.getName().compareTo("System")==0)
            status = "Available";
        else
            status = "Reserved";
        String coordinates = SimulatorLocationTxt.getText();
        // Cria a timestamp do tempo atual
        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyy 'às' HH:mm:ss z");
        Date timestamp = new Date();
        // Insere a informação na classe carInfo
        CarInfo carInfo = new CarInfo(car, user, formatter.format(timestamp), status, coordinates, speed);
        
        // Minar o proximo bloco com a informação prestada
        if (clientMiner != null) {
            try {   
                if (clientMiner.isMining()) {
                    clientMiner.stopMining(9999);
                    GuiUtils.insertText(ServerLogTxt, "Stop Mining", clientMiner.getAdress());
                } else {
                    // Nova Thread onde irá mudar os textos para o modo de trabalho em progresso e fazer a mineração respetiva
                    new Thread(() -> {
                        try {
                            GuiUtils.insertText(ServerLogTxt, "Start Mining", clientMiner.getAdress(), Color.GREEN, Color.WHITE);

                            SwingUtilities.invokeLater(() -> {
                                NonceTxt.setText("");
                                HashTxt.setText("");
                                SimulatorMineBt.setText("Stop");
                            });
                            // Adiciona o bloco à blockchain da informação respetiva com os zeros
                            carRegistry.addCarInfo(carInfo, (int) ZerosTxt.getValue());
                            MessageTxt.setText(carInfo.toString());
                            // Calcula o nonce da informação atribuída com os zeros pedidos
                            int nonce = clientMiner.mine(carInfo.toString(), (int) ZerosTxt.getValue());
                            // Após o seu termino, os textos voltam ao seu estado normal de trabalho finalizado
                            SwingUtilities.invokeLater(() -> {
                                NonceTxt.setText(nonce + "");
                                HashTxt.setText(Miner.getHash(carInfo.toString(), nonce));
                                SimulatorMineBt.setText("Start");
                            });
                        } catch (Exception ex) {
                            onException("Mining", ex);
                        }
                    }).start();
                }
            } catch (Exception ex) {
                onException("Mining", ex);
            }
        }
        carRegistry.save();
    }//GEN-LAST:event_SimulatorMineBtActionPerformed

    private void ReservedCarsTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ReservedCarsTxtMouseClicked
        // Quando um carro é selecionado da lista USER>MY-RENTED-CARS, este colocará a informação do mesmo obtida da blockchain na lista direita
        DefaultListModel model = new DefaultListModel();
        model.addAll(carRegistry.getCarInfoList(ReservedCarsTxt.getSelectedValue()));
        ReservedCarInfoTxt.setModel(model);
    }//GEN-LAST:event_ReservedCarsTxtMouseClicked

    private void AvailableCarsTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AvailableCarsTxtMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_AvailableCarsTxtMouseClicked

    private void MainPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_MainPaneStateChanged
        // Quando a tab "Available Cars" é selecionada, este colocará a informação do mesmo obtida da blockchain na lista
        if (MainPane.getSelectedComponent() == AvailableCarsPanel) {
            DefaultListModel model = new DefaultListModel();
            model.addAll(carRegistry.getAvailableCarsList());
            AvailableCarsTxt.setModel(model);
        }
    }//GEN-LAST:event_MainPaneStateChanged

    private void TabUsersStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_TabUsersStateChanged
        // Quando a tab "My Rented Cars" é selecionada na tab User, este colocará a informação do mesmo obtida da blockchain na lista
        if (TabUsers.getSelectedComponent() == ReservedCarsPanel) {
            DefaultListModel model = new DefaultListModel();
            model.addAll(carRegistry.getCarsList(loggedUser));
            ReservedCarsTxt.setModel(model);
        }
    }//GEN-LAST:event_TabUsersStateChanged

    private void ManageUsersListTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ManageUsersListTxtMouseClicked
        // Quando um utilizador é selecionado da lista MANAGE>CARS, este colocará a informação do mesmo obtida da blockchain na lista direita quanto aos carros que teve ou já teve
        DefaultListModel model = new DefaultListModel();
        model.addAll(carRegistry.getCarInfoList(ManageUsersListTxt.getSelectedValue()));
        System.out.println(ManageUsersListTxt.getSelectedValue());
        ClientCarInfoList.setModel(model);
    }//GEN-LAST:event_ManageUsersListTxtMouseClicked

    private void SimulatorClientTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SimulatorClientTxtActionPerformed
        // Quando a dropdown Cliente da tab MANAGE>SIMULATOR, este esconderá valores irredundantes quando selecionado o "cliente" System
        if (SimulatorClientTxt.getSelectedItem().toString().compareTo("System")==0){
            SimulatorSpeedTxt.setEnabled(false);
            SimulatorSpeedTxt.setText("0");
            SimulatorLocationTxt.setEnabled(false);
            SimulatorLocationTxt.setText("0");
        } else {
            SimulatorSpeedTxt.setEnabled(true);
            SimulatorSpeedTxt.setText("");
            SimulatorLocationTxt.setEnabled(true);
            SimulatorLocationTxt.setText("");
        }
            
    }//GEN-LAST:event_SimulatorClientTxtActionPerformed

    private void HomeLogoutBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HomeLogoutBtActionPerformed
        // Logout, de volta para o menu de login.
        try{
            new CarsOnBlocksLogIn().setVisible(true);
            this.dispose();
        } catch (Exception ex) {
            Logger.getLogger(CarsOnBlocksLogIn.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_HomeLogoutBtActionPerformed

    /**
     * @param args the command line arguments
     */
    public void displayUser() {
        // Inseres os textos correspondentes à informação do utilizador atualmente em sessão nas tabs respetivas
        String pubB64 = Base64.getEncoder().encodeToString(
                loggedUser.getPubKey().getEncoded());
        txtInfo.setText(loggedUser.getInfo());
        txtPrivateKey.setText(Base64.getEncoder().encodeToString(
                loggedUser.getPrivKey().getEncoded()));
        txtPublicKey.setText(pubB64);
        txtSecretKey.setText(Base64.getEncoder().encodeToString(
                loggedUser.getKey().getEncoded()));
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AvailableCarsPanel;
    private javax.swing.JList<Car> AvailableCarsTxt;
    private javax.swing.JPanel CarsDescription1;
    private javax.swing.JPanel CarsDescription2;
    private javax.swing.JScrollPane CarsList1;
    private javax.swing.JScrollPane CarsList2;
    private javax.swing.JScrollPane CarsList5;
    private javax.swing.JPanel CarsPanel;
    private javax.swing.JList<CarInfo> ClientCarInfoList;
    private javax.swing.JPanel ClientTransactions;
    private javax.swing.JScrollPane ClientsList1;
    private javax.swing.JTextField HashTxt;
    private javax.swing.JButton HomeLogoutBt;
    private javax.swing.JPanel InfoPanel;
    private javax.swing.JTabbedPane MainPane;
    private javax.swing.JList<CarInfo> ManageCarInfoTxt;
    private javax.swing.JList<Car> ManageCarsListTxt;
    private javax.swing.JList<User> ManageUsersListTxt;
    private javax.swing.JTextArea MessageTxt;
    private javax.swing.JTextField NonceTxt;
    private javax.swing.JButton RegisterCarBt;
    private javax.swing.JTextField RegisterCarManufacturer;
    private javax.swing.JTextField RegisterCarModel;
    private javax.swing.JPanel RegisterCarPanel;
    private javax.swing.JPanel RegisterPanel;
    private javax.swing.JComboBox<String> RegisterUserAccess;
    private javax.swing.JButton RegisterUserBt;
    private javax.swing.JPanel RegisterUserPanel;
    private javax.swing.JPasswordField RegisterUserPass1;
    private javax.swing.JPasswordField RegisterUserPass2;
    private javax.swing.JTextField RegisterUsername;
    private javax.swing.JScrollPane ReservedCarInfoScrl;
    private javax.swing.JList<CarInfo> ReservedCarInfoTxt;
    private javax.swing.JPanel ReservedCarsPanel;
    private javax.swing.JList<Car> ReservedCarsTxt;
    private javax.swing.JTextPane ServerLogTxt;
    private javax.swing.JPanel ServerPanel;
    private javax.swing.JComboBox<Car> SimulatorCarTxt;
    private javax.swing.JComboBox<User> SimulatorClientTxt;
    private javax.swing.JTextField SimulatorLocationTxt;
    private javax.swing.JButton SimulatorMineBt;
    private javax.swing.JPanel SimulatorPanel;
    private javax.swing.JTextField SimulatorSpeedTxt;
    private javax.swing.JTabbedPane TabManagement;
    private javax.swing.JTabbedPane TabUsers;
    private javax.swing.JPanel UpdatesPanel;
    private javax.swing.JPanel UsersPanel;
    private javax.swing.JSpinner ZerosTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JList<String> lstBlockchain;
    private javax.swing.JPanel pnBlockChain;
    private javax.swing.JTabbedPane tpBlockchain;
    private javax.swing.JTextArea txtBlock;
    private javax.swing.JTextArea txtInfo;
    private javax.swing.JTextArea txtPrivateKey;
    private javax.swing.JTextArea txtPublicKey;
    private javax.swing.JTextArea txtSecretKey;
    private javax.swing.JLabel welcomeLabel;
    // End of variables declaration//GEN-END:variables

    public void onException(String title, Exception ex) {
        GuiUtils.insertText(ServerLogTxt, title, ex.getMessage(), Color.RED, Color.MAGENTA);
    }

    public void onMessage(String title, String message) {
        GuiUtils.insertText(ServerLogTxt, title, message, Color.GREEN, Color.lightGray);
    }

    public void onSynchronizeChain(String title, String message) {
        SwingUtilities.invokeLater(() -> {
            GuiUtils.insertText(ServerLogTxt, title, message);
            updateBlockchain();
        });
    }

    public void onAddNewBlock(String title, Block b) {
        SwingUtilities.invokeLater(() -> {
            GuiUtils.insertText(ServerLogTxt, title, b.getFullInfo());
            updateBlockchain();
        });
    }

    public void onStartMining(String message, int zeros) {
        SwingUtilities.invokeLater(() -> {
            try {

                GuiUtils.insertText(ServerLogTxt, "Start Mining",
                        " " + message + "[" + zeros + "]", Color.GREEN, Color.WHITE);
                MessageTxt.setText(clientMiner.getMessage());
                HashTxt.setText("");
                ZerosTxt.setValue(zeros);
                NonceTxt.setBackground(Color.lightGray);
                HashTxt.setBackground(Color.lightGray);
            } catch (RemoteException ex) {
                onException("Start Mining", ex);
            }
        });
    }

    public void onStopMining(int nonce) {
        SwingUtilities.invokeLater(() -> {
            GuiUtils.insertText(ServerLogTxt, "Stop Mining", Thread.currentThread().getName());
        });
    }

    public void onMining(int number) {
        SwingUtilities.invokeLater(() -> {
            NonceTxt.setText(number + "");
        });
    }

    public void onNounceFound(int nonce) {
        //parar a rede de minar
        try {
            clientMiner.stopMining(nonce);
        } catch (RemoteException ex) {
            onException("Nounce Found", ex);
        }

        //atualizar a GUI
        SwingUtilities.invokeLater(() -> {
            GuiUtils.insertText(ServerLogTxt, "WINNER ", "\tFound nonce [ " + nonce + " ]", Color.GREEN, Color.MAGENTA);
            NonceTxt.setText(nonce + "");
            HashTxt.setText(Miner.getHash(MessageTxt.getText(), nonce));
            NonceTxt.setBackground(Color.GREEN);
            HashTxt.setBackground(Color.GREEN);
        });
    }
    
    private void updateBlockchain() {
        try {
            DefaultListModel model = new DefaultListModel();
            model.addAll(clientMiner.getBlockChain().getChain());
            lstBlockchain.setModel(model);
        } catch (RemoteException ex) {
            onException("Update List of Blocks", ex);
        }

    }
   
}
